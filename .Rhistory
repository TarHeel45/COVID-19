sidebarLayout(
sidebarPanel(
width = 3,
dateRangeInput("DateRange", "Date Range:", start = max(dfFull$Date) - 90, end = max(dfFull$Date)),
selectizeInput("DisplayRegions", "Select Regions to Display:",
choices = c(
"World" = "World",
"Continents" = "continent",
"Sub-Regions" = "sub_region",
"Countries" = "Country"
),
selected = c("World")
),
pickerInput("Locations", "Locations",
choices = NULL,
options = list(`actions-box` = T, `live-search` = T), multiple = T
),
radioButtons("Outcome", "Outcome:",
choices = c(
"Confirmed Cases" = "Confirmed",
"Deaths" = "Deaths"
)
),
# "Recoveries" = "Recovered")),
div(tabsetPanel(
id = "InputTabsetPanel",
tabPanel(
"Plot Options",
radioButtons("PlotType", "Plot Type:", choices = c("Line", "Bar")),
radioButtons("ScaleType", "Y-Axis Scale:", choices = c("Linear", "Log-10")),
materialSwitch("Rolling", "Rolling 7-day Avg (New Outcomes Only)", value = F)
)
))
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel(
"Cumulative",
plotlyOutput("CumulativePlot", width = "100%", height = 500)
),
tabPanel(
"Cumulative (Lagged)",
numericInput("LaggedDaysToShow", "Number of Days:", value = as.numeric(max(dfFull$Date) - min(dfFull$Date))),
plotlyOutput("LaggedCumulativePlot", width = "100%", height = 500)
),
tabPanel(
"New Outcomes",
plotlyOutput("NewPlot", width = "100%", height = 500)
),
tabPanel(
"World Map",
leafletOutput("Map", width = "100%", height = 500)
)
)
)
)
)
##### Define server logic #####
server <- function(input, output, session) {
observe({
LocationChoices <- if (input$DisplayRegions == "continent") {
listContinents
} else if (input$DisplayRegions == "sub_region") {
listSubRegions
} else if (input$DisplayRegions == "Country") {
listCountries
} else if (input$DisplayRegions == "World") {
NULL
}
updatePickerInput(session, "Locations", choices = LocationChoices)
})
output$GlobalConfirmedCount <- renderText({
curDate <- max(dfFull$Date)
paste0(prettyNum(sum(dfFull$Confirmed[dfFull$Date == curDate], na.rm = T), big.mark = ","), " Confirmed Cases")
})
output$GlobalDeathCount <- renderText({
curDate <- max(dfFull$Date)
paste0(prettyNum(sum(dfFull$Deaths[dfFull$Date == curDate], na.rm = T), big.mark = ","), " Deaths")
})
output$CurrentDate <- renderText({
paste("Data as of", format(max(dfFull$Date), "%d %B %Y"))
})
output$CumulativePlot <- renderPlotly({
if (is.null(input$Locations) & input$DisplayRegions != "World") { return(NULL) }
if (input$DisplayRegions == "World") { dfTmp <- dfFull
} else { dfTmp <- dfFull[dfFull[[input$DisplayRegions]] %in% input$Locations, ]
}
dfTmp <- dfTmp %>%
group_by((!!sym(input$DisplayRegions)), Date) %>%
summarise(Value = sum((!!sym(input$Outcome)), na.rm = T)) %>%
filter(Date >= input$DateRange[1] & Date <= input$DateRange[2])
PlotText <- CreatePlotText(input$DisplayRegions, input$Outcome, input$PlotType, input$ScaleType, F, F, input$Rolling)
eval(parse(text = PlotText))
})
output$LaggedCumulativePlot <- renderPlotly({
if (is.null(input$Locations) & input$DisplayRegions != "World") {
return(NULL)
}
dfTmp <- LagOutcomeByLocation(location = input$DisplayRegions, metric = input$Outcome, minimum = 100)
if (input$DisplayRegions != "World") {
dfTmp <- dfTmp[dfTmp[[input$DisplayRegions]] %in% input$Locations, ]
}
PlotText <- CreatePlotText(input$DisplayRegions, input$Outcome, input$PlotType, input$ScaleType, T, F, input$Rolling)
if (nrow(dfTmp) == 0) {
"Selected location does not have over 100 of the specified outcome"
} else {
eval(parse(text = PlotText))
}
})
output$NewPlot <- renderPlotly({
if (is.null(input$Locations) & input$DisplayRegions != "World") {
return(NULL)
}
if (input$Outcome == "Confirmed") {
valCol <- "NewCases"
} else if (input$Outcome == "Deaths") {
valCol <- "NewDeaths"
} else if (input$Outcome == "Recovered") {
valCol <- "NewRecoveries"
}
if (input$DisplayRegions == "World") {
dfTmp <- dfFull
} else {
dfTmp <- dfFull[dfFull[[input$DisplayRegions]] %in% input$Locations, ]
}
dfTmp <- dfTmp %>%
group_by((!!sym(input$DisplayRegions)), Date) %>%
summarise(Value = sum((!!sym(valCol)), na.rm = T)) %>%
filter(Date >= input$DateRange[1] & Date <= input$DateRange[2])
dfTmp <- dfTmp %>%
group_by((!!sym(input$DisplayRegions))) %>%
mutate(Value_Roll = rollmean(Value, k = 7, fill = NA, align = "right"))
PlotText <- CreatePlotText(input$DisplayRegions, input$Outcome, input$PlotType, input$ScaleType, F, T, input$Rolling)
eval(parse(text = PlotText))
})
output$Map <- renderLeaflet({
dfTmp <- dfFull[dfFull$Date == max(dfFull$Date), ] %>%
group_by(Country) %>%
summarise(
Confirmed = sum(Confirmed, na.rm = T),
Deaths = sum(Deaths, na.rm = T),
NewCases = sum(NewCases, na.rm = T),
NewDeaths = sum(NewDeaths, na.rm = T)
)
dfTmp <- select(left_join(dfTmp, distinct(dfFull[, c("Province", "Latitude", "Longitude")]), by = c("Country" = "Province")), Country, Latitude, Longitude, Confirmed, Deaths, NewCases, NewDeaths)
# if (input$Outcome == "Confirmed") {
#     dfTmp = dfFull[dfFull$Date == max(dfFull$Date), ] %>% group_by(Country) %>% summarise(Confirmed = sum(Confirmed, na.rm=T))
#     dfTmp = select(left_join(dfTmp, distinct(dfFull[, c("Province", "Latitude", "Longitude")]), by = c("Country" = "Province")), Country, Confirmed, Latitude, Longitude)
# } else {
#     dfTmp = dfFull[dfFull$Date == max(dfFull$Date), ] %>% group_by(Country) %>% summarise(Deaths = sum(Deaths, na.rm=T))
#     dfTmp = select(left_join(dfTmp, distinct(dfFull[, c("Province", "Latitude", "Longitude")]), by = c("Country" = "Province")), Country, Deaths, Latitude, Longitude)
# }
# Quick fix for now to get coordinates; problem with multiple provinces for a country
dfTmp$Latitude[dfTmp$Country == "Australia"] <- dfFull$Latitude[dfFull$Province == "South Australia" & dfFull$Date == max(dfFull$Date)]
dfTmp$Longitude[dfTmp$Country == "Australia"] <- dfFull$Longitude[dfFull$Province == "South Australia" & dfFull$Date == max(dfFull$Date)]
dfTmp$Latitude[dfTmp$Country == "China"] <- dfFull$Latitude[dfFull$Province == "Hubei" & dfFull$Date == max(dfFull$Date)]
dfTmp$Longitude[dfTmp$Country == "China"] <- dfFull$Longitude[dfFull$Province == "Hubei" & dfFull$Date == max(dfFull$Date)]
leaflet() %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
setView(lng = -2.531291, lat = 35.591436, zoom = 2) %>%
addCircles(
lng = dfTmp$Longitude, lat = dfTmp$Latitude,
radius = (dfTmp[[input$Outcome]])^(1 / 4) * 4e4,
popup = paste(
"Country:", dfTmp$Country, "<br>",
"Cases:", prettyNum(dfTmp$Confirmed, big.mark = ","), "<br>",
"Deaths:", prettyNum(dfTmp$Deaths, big.mark = ","), "<br>",
"New Cases:", prettyNum(dfTmp$NewCases, big.mark = ","), "<br>",
"New Deaths:", prettyNum(dfTmp$NewDeaths, big.mark = ",")
),
stroke = T,
weight = 2,
color = "#E04600",
fillColor = "#FF7333"
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(tidyverse)
dfConfirmedv2 <- read.csv(file = "csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
dfDeathsv2 <- read.csv(file = "csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
dfRecoveredv2 <- read.csv(file = "csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")
cleanDF <- function(df, valueColName) {
df$Province.State <- as.character(df$Province.State)
df$Country.Region <- as.character(df$Country.Region)
df$Province.State[df$Province.State == ""] <- df$Country.Region[df$Province.State == ""]
df <- df %>% mutate(keyCol = unite(df[, 1:4], col = "key", sep = ";")$key)
df <- df[, -c(1:4)]
df <- df[, c(ncol(df), 2:ncol(df)-1)]
df <- gather(df, "date", valueCol, -keyCol)
df$date <- as.Date(str_replace_all(df$date, "X", ""), format = "%m.%d.%y")
colnames(df)[colnames(df) == "valueCol"] <- valueColName
colnames(df)[colnames(df) == "date"] <- "Date"
df %>% separate(col = 1, into = c("Province", "Country", "Latitude", "Longitude"), sep = ";")
}
dfConfirmed.Clean <- cleanDF(dfConfirmedv2, "Confirmed")
dfDeaths.Clean <- cleanDF(dfDeathsv2, "Deaths")
dfRecovered.Clean <- cleanDF(dfRecoveredv2, "Recovered")
dfFull <- full_join(dfConfirmed.Clean, dfDeaths.Clean, by = c("Province", "Country", "Latitude", "Longitude", "Date"))
dfFull <- full_join(dfFull, dfRecovered.Clean, by = c("Province", "Country", "Latitude", "Longitude", "Date"))
dfCountryContinentMapping <- read.csv(file = "Data/CountryContinentCrosswalk.csv")
dfFull <- left_join(dfFull, dfCountryContinentMapping[, c("Country", "continent", "sub_region")], by = "Country")
dfFull$continent <- as.character(dfFull$continent)
dfFull$sub_region <- as.character(dfFull$sub_region)
##### Lists of locations (Continent, Sub-Region, Country) #####
dfTmp <- unique(dfFull[, c("Country", "continent", "sub_region")])
dfTmp$continent_sub_region <- paste0(dfTmp$continent, " - ", dfTmp$sub_region)
dfTmp <- unique(dfTmp[, c("continent_sub_region", "Country")])
listCountries <- split(dfTmp, dfTmp$continent_sub_region, drop = T)
for (i in seq_along(listCountries)) {
listCountries[[i]]<- listCountries[[i]]$Country
}
dfTmp <- unique(dfFull[, c("continent", "sub_region")])
listSubRegions <- split(dfTmp, dfTmp$continent, drop = T)
for (i in seq_along(listSubRegions)) {
listSubRegions[[i]] <- listSubRegions[[i]]$sub_region
}
listContinents <- list(unique(dfFull$continent))
names(listContinents) <- "Continents"
dfFull <- dfFull %>% arrange(Province, Country, Date) %>%
group_by(Province, Country) %>%
mutate(LaggedCases = dplyr::lag(Confirmed, 1, default = 0),
LaggedDeaths = dplyr::lag(Deaths, 1, default = 0)
)
dfFull <- dfFull %>% mutate(NewCases = Confirmed - LaggedCases,
NewDeaths = Deaths - LaggedDeaths,
) %>% select(-c(LaggedCases, LaggedDeaths))
dfFull$World <- "World"
dfFull$Latitude <- as.numeric(dfFull$Latitude)
dfFull$Longitude <- as.numeric(dfFull$Longitude)
save(dfFull,
dfConfirmed.Clean,
dfDeaths.Clean,
dfRecovered.Clean,
listCountries,
listSubRegions,
listContinents,
file = "Data/data.RData")
library(tidyverse)
library(shiny)
library(scales)
library(shinyWidgets) # extra shiny UI options
library(plotly) # interactive plots
library(ggthemes)
library(shinythemes) # shiny UI themes
library(rsconnect)
library(leaflet) # interactive map
# library(rgdal) # geospatial data abstraction library functions
library(geojsonio) # deal with json file
# library(sp) # deal with spatial data
library(zoo)
load("Data/data.RData")
##### Functions #####
LagOutcomeByLocation <- function(location, metric, minimum = 100) {
dfCaseThreshold <- dfFull %>%
group_by((!!sym(location)), Date) %>%
summarise(Value = sum((!!sym(metric)), na.rm = T)) %>%
filter(Value >= minimum) %>%
slice(1) %>%
select((!!sym(location)), Date)
dfTmp <- dfFull %>%
group_by((!!sym(location)), Date) %>%
summarise(Value = sum((!!sym(metric)), na.rm = T))
left_join(dfTmp, dfCaseThreshold, by = location, suffix = c("", ".y")) %>%
group_by((!!sym(location)), Date) %>%
filter(Date >= Date.y) %>%
select(-Date.y) %>%
ungroup() %>%
group_by((!!sym(location))) %>%
mutate(TSE = Date - dfCaseThreshold$Date[match((!!sym(location)), dfCaseThreshold[[location]])])
}
CreatePlotText <- function(Region, Outcome, PlotType, ScaleType, LaggedPlot, NewPlot, Rolling) {
textPlot <- "ggplotly(ggplot()"
xval <- ifelse(LaggedPlot, "TSE", "Date")
if (PlotType == "Line") {
if (!LaggedPlot & NewPlot & ScaleType == "Linear" & Rolling) {
textPlot <- paste(textPlot, "+ geom_point(data = dfTmp, mapping = aes(x = ", xval, ", y = Value, color = ", Region, "), alpha = .5)")
textPlot <- paste(textPlot, "+ geom_line(data = dfTmp, mapping = aes(x = ", xval, ", y = Value_Roll, color = ", Region, "), size = 1.5, linetype = \"dotted\")")
} else {
textPlot <- paste(textPlot, "+ geom_point(data = dfTmp, mapping = aes(x = ", xval, ", y = Value, color = ", Region, "))")
textPlot <- paste(textPlot, "+ geom_line(data = dfTmp, mapping = aes(x = ", xval, ", y = Value, color = ", Region, "), size = 1)")
}
} else if (PlotType == "Bar") {
if (!LaggedPlot & NewPlot & ScaleType == "Linear" & Rolling) {
textPlot <- paste(textPlot, "+ geom_bar(data = dfTmp, mapping = aes(x = ", xval, ", y = Value, fill = ", Region, "), stat = 'Identity', position = \"dodge\", alpha = .5)")
textPlot <- paste(textPlot, "+ geom_line(data = dfTmp, mapping = aes(x = ", xval, ", y = Value_Roll, color = ", Region, "), size = 1.5, linetype = \"dotted\")")
} else {
textPlot <- paste(textPlot, "+ geom_bar(data = dfTmp, mapping = aes(x = ", xval, ", y = Value, fill = ", Region, "), stat = 'Identity', position = \"dodge\")")
}
}
textPlot <- paste(textPlot, "+ theme_minimal()")
if (LaggedPlot) {
if (Outcome == "Confirmed") {
textPlot <- paste(textPlot, "+ labs(title = \"Cumulative Confirmed Cases since 100th Confirmed Case\", x = \"Days Since 100th Confirmed Case\", y = \"Confirmed Cases\")")
} else if (Outcome == "Deaths") {
textPlot <- paste(textPlot, "+ labs(title = \"Cumulative Confirmed Deaths since 100th Confirmed Death\", x = \"Days Since 100th Confirmed Death\", y = \"Confirmed Deaths\")")
} else if (Outcome == "Recovered") {
textPlot <- paste(textPlot, "+ labs(title = \"Cumulative Confirmed Recoveries since 100th Recovery\", x = \"Days since 100th Recovery\", y = \"Confirmed Recoveries\")")
}
} else {
if (Outcome == "Confirmed") {
textPlot <- paste(textPlot, "+ labs(title = \"Cumulative Confirmed Cases\", x = \"Date\", y = \"Confirmed Cases\")")
} else if (Outcome == "Deaths") {
textPlot <- paste(textPlot, "+ labs(title = \"Cumulative Confirmed Deaths\", x = \"Date\", y = \"Confirmed Deaths\")")
} else if (Outcome == "Recovered") {
textPlot <- paste(textPlot, "+ labs(title = \"Cumulative Confirmed Recoveries\", x = \"Date\", y = \"Confirmed Recoveries\")")
}
}
if (ScaleType == "Linear") {
textPlot <- paste(textPlot, "+ scale_y_continuous(labels = comma)")
} else if (ScaleType == "Log-10") {
textPlot <- paste(textPlot, "+ scale_y_continuous(labels = comma, trans = 'log10')")
}
if (LaggedPlot) {
textPlot <- paste(textPlot, "+ xlim(0, input$LaggedDaysToShow)")
}
if (NewPlot) {
textPlot <- str_replace_all(textPlot, "Cumulative", "Daily New")
}
textPlot <- paste0(textPlot, ")")
textPlot
}
##### Define UI for application #####
ui <- fluidPage(
theme = shinytheme("yeti"),
# Application title
titlePanel("COVID-19 Dashboard"),
h3(textOutput("GlobalConfirmedCount"), align = "left"),
h4(textOutput("GlobalDeathCount"), align = "left"),
h6(textOutput("CurrentDate"), align = "left"),
sidebarLayout(
sidebarPanel(
width = 3,
dateRangeInput("DateRange", "Date Range:", start = max(dfFull$Date) - 90, end = max(dfFull$Date)),
selectizeInput("DisplayRegions", "Select Regions to Display:",
choices = c(
"World" = "World",
"Continents" = "continent",
"Sub-Regions" = "sub_region",
"Countries" = "Country"
),
selected = c("World")
),
pickerInput("Locations", "Locations",
choices = NULL,
options = list(`actions-box` = T, `live-search` = T), multiple = T
),
radioButtons("Outcome", "Outcome:",
choices = c(
"Confirmed Cases" = "Confirmed",
"Deaths" = "Deaths"
)
),
# "Recoveries" = "Recovered")),
div(tabsetPanel(
id = "InputTabsetPanel",
tabPanel(
"Plot Options",
radioButtons("PlotType", "Plot Type:", choices = c("Line", "Bar")),
radioButtons("ScaleType", "Y-Axis Scale:", choices = c("Linear", "Log-10")),
materialSwitch("Rolling", "Rolling 7-day Avg (New Outcomes Only)", value = F)
)
))
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel(
"Cumulative",
plotlyOutput("CumulativePlot", width = "100%", height = 500)
),
tabPanel(
"Cumulative (Lagged)",
numericInput("LaggedDaysToShow", "Number of Days:", value = as.numeric(max(dfFull$Date) - min(dfFull$Date))),
plotlyOutput("LaggedCumulativePlot", width = "100%", height = 500)
),
tabPanel(
"New Outcomes",
plotlyOutput("NewPlot", width = "100%", height = 500)
),
tabPanel(
"World Map",
leafletOutput("Map", width = "100%", height = 500)
)
)
)
)
)
##### Define server logic #####
server <- function(input, output, session) {
observe({
LocationChoices <- if (input$DisplayRegions == "continent") {
listContinents
} else if (input$DisplayRegions == "sub_region") {
listSubRegions
} else if (input$DisplayRegions == "Country") {
listCountries
} else if (input$DisplayRegions == "World") {
NULL
}
updatePickerInput(session, "Locations", choices = LocationChoices)
})
output$GlobalConfirmedCount <- renderText({
curDate <- max(dfFull$Date)
paste0(prettyNum(sum(dfFull$Confirmed[dfFull$Date == curDate], na.rm = T), big.mark = ","), " Confirmed Cases")
})
output$GlobalDeathCount <- renderText({
curDate <- max(dfFull$Date)
paste0(prettyNum(sum(dfFull$Deaths[dfFull$Date == curDate], na.rm = T), big.mark = ","), " Deaths")
})
output$CurrentDate <- renderText({
paste("Data as of", format(max(dfFull$Date), "%d %B %Y"))
})
output$CumulativePlot <- renderPlotly({
if (is.null(input$Locations) & input$DisplayRegions != "World") { return(NULL) }
if (input$DisplayRegions == "World") { dfTmp <- dfFull
} else { dfTmp <- dfFull[dfFull[[input$DisplayRegions]] %in% input$Locations, ]
}
dfTmp <- dfTmp %>%
group_by((!!sym(input$DisplayRegions)), Date) %>%
summarise(Value = sum((!!sym(input$Outcome)), na.rm = T)) %>%
filter(Date >= input$DateRange[1] & Date <= input$DateRange[2])
PlotText <- CreatePlotText(input$DisplayRegions, input$Outcome, input$PlotType, input$ScaleType, F, F, input$Rolling)
eval(parse(text = PlotText))
})
output$LaggedCumulativePlot <- renderPlotly({
if (is.null(input$Locations) & input$DisplayRegions != "World") {
return(NULL)
}
dfTmp <- LagOutcomeByLocation(location = input$DisplayRegions, metric = input$Outcome, minimum = 100)
if (input$DisplayRegions != "World") {
dfTmp <- dfTmp[dfTmp[[input$DisplayRegions]] %in% input$Locations, ]
}
PlotText <- CreatePlotText(input$DisplayRegions, input$Outcome, input$PlotType, input$ScaleType, T, F, input$Rolling)
if (nrow(dfTmp) == 0) {
"Selected location does not have over 100 of the specified outcome"
} else {
eval(parse(text = PlotText))
}
})
output$NewPlot <- renderPlotly({
if (is.null(input$Locations) & input$DisplayRegions != "World") {
return(NULL)
}
if (input$Outcome == "Confirmed") {
valCol <- "NewCases"
} else if (input$Outcome == "Deaths") {
valCol <- "NewDeaths"
} else if (input$Outcome == "Recovered") {
valCol <- "NewRecoveries"
}
if (input$DisplayRegions == "World") {
dfTmp <- dfFull
} else {
dfTmp <- dfFull[dfFull[[input$DisplayRegions]] %in% input$Locations, ]
}
dfTmp <- dfTmp %>%
group_by((!!sym(input$DisplayRegions)), Date) %>%
summarise(Value = sum((!!sym(valCol)), na.rm = T)) %>%
filter(Date >= input$DateRange[1] & Date <= input$DateRange[2])
dfTmp <- dfTmp %>%
group_by((!!sym(input$DisplayRegions))) %>%
mutate(Value_Roll = rollmean(Value, k = 7, fill = NA, align = "right"))
PlotText <- CreatePlotText(input$DisplayRegions, input$Outcome, input$PlotType, input$ScaleType, F, T, input$Rolling)
eval(parse(text = PlotText))
})
output$Map <- renderLeaflet({
dfTmp <- dfFull[dfFull$Date == max(dfFull$Date), ] %>%
group_by(Country) %>%
summarise(
Confirmed = sum(Confirmed, na.rm = T),
Deaths = sum(Deaths, na.rm = T),
NewCases = sum(NewCases, na.rm = T),
NewDeaths = sum(NewDeaths, na.rm = T)
)
dfTmp <- select(left_join(dfTmp, distinct(dfFull[, c("Province", "Latitude", "Longitude")]), by = c("Country" = "Province")), Country, Latitude, Longitude, Confirmed, Deaths, NewCases, NewDeaths)
# if (input$Outcome == "Confirmed") {
#     dfTmp = dfFull[dfFull$Date == max(dfFull$Date), ] %>% group_by(Country) %>% summarise(Confirmed = sum(Confirmed, na.rm=T))
#     dfTmp = select(left_join(dfTmp, distinct(dfFull[, c("Province", "Latitude", "Longitude")]), by = c("Country" = "Province")), Country, Confirmed, Latitude, Longitude)
# } else {
#     dfTmp = dfFull[dfFull$Date == max(dfFull$Date), ] %>% group_by(Country) %>% summarise(Deaths = sum(Deaths, na.rm=T))
#     dfTmp = select(left_join(dfTmp, distinct(dfFull[, c("Province", "Latitude", "Longitude")]), by = c("Country" = "Province")), Country, Deaths, Latitude, Longitude)
# }
# Quick fix for now to get coordinates; problem with multiple provinces for a country
dfTmp$Latitude[dfTmp$Country == "Australia"] <- dfFull$Latitude[dfFull$Province == "South Australia" & dfFull$Date == max(dfFull$Date)]
dfTmp$Longitude[dfTmp$Country == "Australia"] <- dfFull$Longitude[dfFull$Province == "South Australia" & dfFull$Date == max(dfFull$Date)]
dfTmp$Latitude[dfTmp$Country == "China"] <- dfFull$Latitude[dfFull$Province == "Hubei" & dfFull$Date == max(dfFull$Date)]
dfTmp$Longitude[dfTmp$Country == "China"] <- dfFull$Longitude[dfFull$Province == "Hubei" & dfFull$Date == max(dfFull$Date)]
leaflet() %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
setView(lng = -2.531291, lat = 35.591436, zoom = 2) %>%
addCircles(
lng = dfTmp$Longitude, lat = dfTmp$Latitude,
radius = (dfTmp[[input$Outcome]])^(1 / 4) * 4e4,
popup = paste(
"Country:", dfTmp$Country, "<br>",
"Cases:", prettyNum(dfTmp$Confirmed, big.mark = ","), "<br>",
"Deaths:", prettyNum(dfTmp$Deaths, big.mark = ","), "<br>",
"New Cases:", prettyNum(dfTmp$NewCases, big.mark = ","), "<br>",
"New Deaths:", prettyNum(dfTmp$NewDeaths, big.mark = ",")
),
stroke = T,
weight = 2,
color = "#E04600",
fillColor = "#FF7333"
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
